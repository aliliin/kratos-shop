// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/order/v1/order.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on OrderStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderStatusMultiError, or
// nil if none found.
func (m *OrderStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderSn

	// no validation rules for Status

	if len(errors) > 0 {
		return OrderStatusMultiError(errors)
	}

	return nil
}

// OrderStatusMultiError is an error wrapping multiple validation errors
// returned by OrderStatus.ValidateAll() if the designated constraints aren't met.
type OrderStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderStatusMultiError) AllErrors() []error { return m }

// OrderStatusValidationError is the validation error returned by
// OrderStatus.Validate if the designated constraints aren't met.
type OrderStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderStatusValidationError) ErrorName() string { return "OrderStatusValidationError" }

// Error satisfies the builtin error interface
func (e OrderStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderStatusValidationError{}

// Validate checks the field values on CartItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemRequestMultiError, or nil if none found.
func (m *CartItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for GoodsId

	// no validation rules for GoodsName

	// no validation rules for GoodsImage

	// no validation rules for GoodsPrice

	// no validation rules for Nums

	// no validation rules for Checked

	if len(errors) > 0 {
		return CartItemRequestMultiError(errors)
	}

	return nil
}

// CartItemRequestMultiError is an error wrapping multiple validation errors
// returned by CartItemRequest.ValidateAll() if the designated constraints
// aren't met.
type CartItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemRequestMultiError) AllErrors() []error { return m }

// CartItemRequestValidationError is the validation error returned by
// CartItemRequest.Validate if the designated constraints aren't met.
type CartItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemRequestValidationError) ErrorName() string { return "CartItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e CartItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemRequestValidationError{}

// Validate checks the field values on OrderRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderRequestMultiError, or
// nil if none found.
func (m *OrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Address

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Post

	if len(errors) > 0 {
		return OrderRequestMultiError(errors)
	}

	return nil
}

// OrderRequestMultiError is an error wrapping multiple validation errors
// returned by OrderRequest.ValidateAll() if the designated constraints aren't met.
type OrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderRequestMultiError) AllErrors() []error { return m }

// OrderRequestValidationError is the validation error returned by
// OrderRequest.Validate if the designated constraints aren't met.
type OrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderRequestValidationError) ErrorName() string { return "OrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderRequestValidationError{}

// Validate checks the field values on OrderInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderInfoResponseMultiError, or nil if none found.
func (m *OrderInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for OrderSn

	// no validation rules for PayType

	// no validation rules for Status

	// no validation rules for Post

	// no validation rules for Total

	// no validation rules for Address

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for AddTime

	if len(errors) > 0 {
		return OrderInfoResponseMultiError(errors)
	}

	return nil
}

// OrderInfoResponseMultiError is an error wrapping multiple validation errors
// returned by OrderInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderInfoResponseMultiError) AllErrors() []error { return m }

// OrderInfoResponseValidationError is the validation error returned by
// OrderInfoResponse.Validate if the designated constraints aren't met.
type OrderInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderInfoResponseValidationError) ErrorName() string {
	return "OrderInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderInfoResponseValidationError{}

// Validate checks the field values on ShopCartInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShopCartInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShopCartInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShopCartInfoResponseMultiError, or nil if none found.
func (m *ShopCartInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShopCartInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for GoodsId

	// no validation rules for Nums

	// no validation rules for Checked

	if len(errors) > 0 {
		return ShopCartInfoResponseMultiError(errors)
	}

	return nil
}

// ShopCartInfoResponseMultiError is an error wrapping multiple validation
// errors returned by ShopCartInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type ShopCartInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopCartInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopCartInfoResponseMultiError) AllErrors() []error { return m }

// ShopCartInfoResponseValidationError is the validation error returned by
// ShopCartInfoResponse.Validate if the designated constraints aren't met.
type ShopCartInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopCartInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopCartInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopCartInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopCartInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopCartInfoResponseValidationError) ErrorName() string {
	return "ShopCartInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShopCartInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopCartInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopCartInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopCartInfoResponseValidationError{}

// Validate checks the field values on OrderItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderItemResponseMultiError, or nil if none found.
func (m *OrderItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderId

	// no validation rules for GoodsId

	// no validation rules for GoodsName

	// no validation rules for GoodsImage

	// no validation rules for GoodsPrice

	// no validation rules for Nums

	if len(errors) > 0 {
		return OrderItemResponseMultiError(errors)
	}

	return nil
}

// OrderItemResponseMultiError is an error wrapping multiple validation errors
// returned by OrderItemResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderItemResponseMultiError) AllErrors() []error { return m }

// OrderItemResponseValidationError is the validation error returned by
// OrderItemResponse.Validate if the designated constraints aren't met.
type OrderItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderItemResponseValidationError) ErrorName() string {
	return "OrderItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderItemResponseValidationError{}

// Validate checks the field values on OrderInfoDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderInfoDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderInfoDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderInfoDetailResponseMultiError, or nil if none found.
func (m *OrderInfoDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderInfoDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderInfoDetailResponseValidationError{
					field:  "OrderInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderInfoDetailResponseValidationError{
					field:  "OrderInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderInfoDetailResponseValidationError{
				field:  "OrderInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGoods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderInfoDetailResponseValidationError{
						field:  fmt.Sprintf("Goods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderInfoDetailResponseValidationError{
						field:  fmt.Sprintf("Goods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderInfoDetailResponseValidationError{
					field:  fmt.Sprintf("Goods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderInfoDetailResponseMultiError(errors)
	}

	return nil
}

// OrderInfoDetailResponseMultiError is an error wrapping multiple validation
// errors returned by OrderInfoDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderInfoDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderInfoDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderInfoDetailResponseMultiError) AllErrors() []error { return m }

// OrderInfoDetailResponseValidationError is the validation error returned by
// OrderInfoDetailResponse.Validate if the designated constraints aren't met.
type OrderInfoDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderInfoDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderInfoDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderInfoDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderInfoDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderInfoDetailResponseValidationError) ErrorName() string {
	return "OrderInfoDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderInfoDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderInfoDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderInfoDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderInfoDetailResponseValidationError{}

// Validate checks the field values on OrderFilterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderFilterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderFilterRequestMultiError, or nil if none found.
func (m *OrderFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Pages

	// no validation rules for PagePerNums

	if len(errors) > 0 {
		return OrderFilterRequestMultiError(errors)
	}

	return nil
}

// OrderFilterRequestMultiError is an error wrapping multiple validation errors
// returned by OrderFilterRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderFilterRequestMultiError) AllErrors() []error { return m }

// OrderFilterRequestValidationError is the validation error returned by
// OrderFilterRequest.Validate if the designated constraints aren't met.
type OrderFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderFilterRequestValidationError) ErrorName() string {
	return "OrderFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderFilterRequestValidationError{}

// Validate checks the field values on OrderListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListResponseMultiError, or nil if none found.
func (m *OrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderListResponseMultiError(errors)
	}

	return nil
}

// OrderListResponseMultiError is an error wrapping multiple validation errors
// returned by OrderListResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListResponseMultiError) AllErrors() []error { return m }

// OrderListResponseValidationError is the validation error returned by
// OrderListResponse.Validate if the designated constraints aren't met.
type OrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListResponseValidationError) ErrorName() string {
	return "OrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListResponseValidationError{}

// Validate checks the field values on CartItemListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemListResponseMultiError, or nil if none found.
func (m *CartItemListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CartItemListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CartItemListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CartItemListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CartItemListResponseMultiError(errors)
	}

	return nil
}

// CartItemListResponseMultiError is an error wrapping multiple validation
// errors returned by CartItemListResponse.ValidateAll() if the designated
// constraints aren't met.
type CartItemListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemListResponseMultiError) AllErrors() []error { return m }

// CartItemListResponseValidationError is the validation error returned by
// CartItemListResponse.Validate if the designated constraints aren't met.
type CartItemListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemListResponseValidationError) ErrorName() string {
	return "CartItemListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemListResponseValidationError{}
